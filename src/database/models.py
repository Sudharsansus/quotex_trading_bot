from sqlalchemy import Column, Integer, String, Float, DateTime, Boolean, Text, ForeignKey, Index
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from datetime import datetime
import json

Base = declarative_base()

class TradingAccount(Base):
    """Trading account information"""
    __tablename__ = 'trading_accounts'
    
    id = Column(Integer, primary_key=True)
    account_id = Column(String(50), unique=True, nullable=False)
    account_name = Column(String(100), nullable=False)
    balance = Column(Float, default=0.0)
    equity = Column(Float, default=0.0)
    margin = Column(Float, default=0.0)
    free_margin = Column(Float, default=0.0)
    currency = Column(String(10), default='USD')
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    trades = relationship("Trade", back_populates="account")
    signals = relationship("TradingSignal", back_populates="account")

class Asset(Base):
    """Trading assets/symbols"""
    __tablename__ = 'assets'
    
    id = Column(Integer, primary_key=True)
    symbol = Column(String(20), unique=True, nullable=False)
    name = Column(String(100), nullable=False)
    category = Column(String(50))  # forex, crypto, commodities, indices
    base_currency = Column(String(10))
    quote_currency = Column(String(10))
    min_trade_amount = Column(Float, default=1.0)
    max_trade_amount = Column(Float, default=1000.0)
    tick_size = Column(Float, default=0.00001)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    trades = relationship("Trade", back_populates="asset")
    market_data = relationship("MarketData", back_populates="asset")
    signals = relationship("TradingSignal", back_populates="asset")

class Trade(Base):
    """Individual trades"""
    __tablename__ = 'trades'
    
    id = Column(Integer, primary_key=True)
    trade_id = Column(String(50), unique=True, nullable=False)
    account_id = Column(Integer, ForeignKey('trading_accounts.id'), nullable=False)
    asset_id = Column(Integer, ForeignKey('assets.id'), nullable=False)
    
    # Trade details
    direction = Column(String(10), nullable=False)  # CALL, PUT
    entry_price = Column(Float, nullable=False)
    exit_price = Column(Float)
    amount = Column(Float, nullable=False)
    payout_rate = Column(Float, default=0.8)
    
    # Timestamps
    open_time = Column(DateTime, nullable=False)
    close_time = Column(DateTime)
    expiry_time = Column(DateTime, nullable=False)
    
    # Results
    status = Column(String(20), default='PENDING')  # PENDING, WIN, LOSS, DRAW
    profit_loss = Column(Float, default=0.0)
    is_demo = Column(Boolean, default=True)
    
    # Strategy info
    strategy_name = Column(String(50))
    signal_id = Column(Integer, ForeignKey('trading_signals.id'))
    
    # Metadata
    notes = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    account = relationship("TradingAccount", back_populates="trades")
    asset = relationship("Asset", back_populates="trades")
    signal = relationship("TradingSignal", back_populates="trades")
    
    # Indexes
    __table_args__ = (
        Index('idx_trades_status', 'status'),
        Index('idx_trades_open_time', 'open_time'),
        Index('idx_trades_account_asset', 'account_id', 'asset_id'),
    )

class MarketData(Base):
    """Historical market data"""
    __tablename__ = 'market_data'
    
    id = Column(Integer, primary_key=True)
    asset_id = Column(Integer, ForeignKey('assets.id'), nullable=False)
    
    # OHLCV data
    timestamp = Column(DateTime, nullable=False)
    open_price = Column(Float, nullable=False)
    high_price = Column(Float, nullable=False)
    low_price = Column(Float, nullable=False)
    close_price = Column(Float, nullable=False)
    volume = Column(Float, default=0.0)
    
    # Timeframe
    timeframe = Column(String(10), nullable=False)  # 1m, 5m, 15m, 1h, 4h, 1d
    
    # Indicators (stored as JSON)
    indicators = Column(Text)  # JSON string of calculated indicators
    
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    asset = relationship("Asset", back_populates="market_data")
    
    # Indexes
    __table_args__ = (
        Index('idx_market_data_asset_time', 'asset_id', 'timestamp'),
        Index('idx_market_data_timeframe', 'timeframe'),
    )

class TradingSignal(Base):
    """Trading signals generated by strategies"""
    __tablename__ = 'trading_signals'
    
    id = Column(Integer, primary_key=True)
    account_id = Column(Integer, ForeignKey('trading_accounts.id'), nullable=False)
    asset_id = Column(Integer, ForeignKey('assets.id'), nullable=False)
    
    # Signal details
    signal_type = Column(String(10), nullable=False)  # CALL, PUT
    strength = Column(Float, nullable=False)  # 0.0 to 1.0
    confidence = Column(Float, nullable=False)  # 0.0 to 1.0
    entry_price = Column(Float, nullable=False)
    target_price = Column(Float)
    stop_loss = Column(Float)
    
    # Strategy info
    strategy_name = Column(String(50), nullable=False)
    indicators_used = Column(Text)  # JSON string of indicators
    
    # Timing
    generated_at = Column(DateTime, nullable=False, default=datetime.utcnow)
    expires_at = Column(DateTime)
    
    # Execution
    is_executed = Column(Boolean, default=False)
    executed_at = Column(DateTime)
    
    # Metadata
    notes = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    account = relationship("TradingAccount", back_populates="signals")
    asset = relationship("Asset", back_populates="signals")
    trades = relationship("Trade", back_populates="signal")
    
    # Indexes
    __table_args__ = (
        Index('idx_signals_generated_at', 'generated_at'),
        Index('idx_signals_strategy', 'strategy_name'),
        Index('idx_signals_executed', 'is_executed'),
    )

class Strategy(Base):
    """Trading strategies configuration"""
    __tablename__ = 'strategies'
    
    id = Column(Integer, primary_key=True)
    name = Column(String(50), unique=True, nullable=False)
    description = Column(Text)
    
    # Strategy parameters (stored as JSON)
    parameters = Column(Text, nullable=False)
    
    # Performance metrics
    total_trades = Column(Integer, default=0)
    winning_trades = Column(Integer, default=0)
    losing_trades = Column(Integer, default=0)
    win_rate = Column(Float, default=0.0)
    profit_loss = Column(Float, default=0.0)
    max_drawdown = Column(Float, default=0.0)
    
    # Status
    is_active = Column(Boolean, default=True)
    is_backtested = Column(Boolean, default=False)
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    last_run_at = Column(DateTime)

class BacktestResult(Base):
    """Backtest results"""
    __tablename__ = 'backtest_results'
    
    id = Column(Integer, primary_key=True)
    strategy_id = Column(Integer, ForeignKey('strategies.id'), nullable=False)
    
    # Backtest parameters
    start_date = Column(DateTime, nullable=False)
    end_date = Column(DateTime, nullable=False)
    initial_balance = Column(Float, nullable=False)
    asset_symbols = Column(Text)  # JSON array of symbols
    
    # Results
    final_balance = Column(Float, nullable=False)
    total_trades = Column(Integer, default=0)
    winning_trades = Column(Integer, default=0)
    losing_trades = Column(Integer, default=0)
    win_rate = Column(Float, default=0.0)
    profit_loss = Column(Float, default=0.0)
    max_drawdown = Column(Float, default=0.0)
    sharpe_ratio = Column(Float)
    
    # Detailed results (stored as JSON)
    trade_details = Column(Text)
    equity_curve = Column(Text)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    strategy = relationship("Strategy")

class MLModel(Base):
    """Machine learning models"""
    __tablename__ = 'ml_models'
    
    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    model_type = Column(String(50), nullable=False)  # RandomForest, XGBoost, LSTM, etc.
    version = Column(String(20), nullable=False)
    
    # Model parameters
    parameters = Column(Text)  # JSON string
    features = Column(Text)  # JSON array of feature names
    
    # Performance metrics
    accuracy = Column(Float)
    precision = Column(Float)
    recall = Column(Float)
    f1_score = Column(Float)
    
    # Training info
    training_samples = Column(Integer)
    training_start_date = Column(DateTime)
    training_end_date = Column(DateTime)
    
    # File paths
    model_path = Column(String(255))
    scaler_path = Column(String(255))
    
    # Status
    is_active = Column(Boolean, default=False)
    is_trained = Column(Boolean, default=False)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class ModelPrediction(Base):
    """ML model predictions"""
    __tablename__ = 'model_predictions'
    
    id = Column(Integer, primary_key=True)
    model_id = Column(Integer, ForeignKey('ml_models.id'), nullable=False)
    asset_id = Column(Integer, ForeignKey('assets.id'), nullable=False)
    
    # Prediction details
    prediction_type = Column(String(10), nullable=False)  # CALL, PUT
    probability = Column(Float, nullable=False)
    confidence = Column(Float, nullable=False)
    
    # Features used (stored as JSON)
    features = Column(Text, nullable=False)
    
    # Timing
    prediction_time = Column(DateTime, nullable=False, default=datetime.utcnow)
    target_time = Column(DateTime, nullable=False)
    
    # Actual outcome (for model evaluation)
    actual_outcome = Column(String(10))  # CALL, PUT
    is_correct = Column(Boolean)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    model = relationship("MLModel")
    asset = relationship("Asset")
    
    # Indexes
    __table_args__ = (
        Index('idx_predictions_time', 'prediction_time'),
        Index('idx_predictions_model_asset', 'model_id', 'asset_id'),
    )

class SystemLog(Base):
    """System logs and events"""
    __tablename__ = 'system_logs'
    
    id = Column(Integer, primary_key=True)
    level = Column(String(20), nullable=False)  # DEBUG, INFO, WARNING, ERROR, CRITICAL
    module = Column(String(50), nullable=False)
    message = Column(Text, nullable=False)
    
    # Additional context
    user_id = Column(String(50))
    session_id = Column(String(50))
    trade_id = Column(String(50))
    
    # Exception details
    exception_type = Column(String(100))
    exception_message = Column(Text)
    stack_trace = Column(Text)
    
    timestamp = Column(DateTime, default=datetime.utcnow)
    
    # Indexes
    __table_args__ = (
        Index('idx_logs_timestamp', 'timestamp'),
        Index('idx_logs_level', 'level'),
        Index('idx_logs_module', 'module'),
    )

class SystemConfig(Base):
    """System configuration settings"""
    __tablename__ = 'system_config'
    
    id = Column(Integer, primary_key=True)
    key = Column(String(100), unique=True, nullable=False)
    value = Column(Text, nullable=False)
    description = Column(Text)
    config_type = Column(String(50), default='general')  # general, trading, ml, api
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)